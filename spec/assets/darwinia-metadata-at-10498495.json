{
  "magic_number": 1635018093,
  "metadata": {
    "V14": {
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: This storage item is explicitly unbounded since it is never intended to be read",
                  " from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 9,
                    "value": 144
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 145
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 143
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 147
          },
          "events": {
            "type": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 151,
              "value": "0x00f2052a0100000000204aa9d1010000405973070000000001c0ca489351010000010098f73e5d010000010000000000000000405973070000000001c0529bfdc50100000100204aa9d1010000010088526a740000004059730700000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 155,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 157,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 158,
              "value": "0x2044617277696e69612044617277696e696100000000da0400000000000038df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000bc9d89904f5b923f01000000d2bc9897eed08f1503000000f78b278be53f454c02000000cbca25e39f14238702000000ed99c5acb25eedf503000000687ad44ad37f03c201000000ab3c0572291feb8b0100000037c8bb1350a9a2a801000000582211f65bb14b8904000000e65b00e46cedd0aa02000000bd78255d4feeea1f0400000000000000",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 90,
              "value": "0x1200",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 163
          },
          "index": 0
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 164
                },
                "fallback": "0x00",
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "plain": 168
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 168
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "type": {
                  "plain": 169
                },
                "fallback": "0x00",
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 164
                },
                "fallback": "0x00",
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 172
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "plain": 174
                },
                "fallback": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "type": {
                  "plain": 174
                },
                "fallback": "0x00",
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_initialize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "type": {
                  "plain": 86
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": 175
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": 175
                },
                "fallback": "0x00",
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              }
            ]
          },
          "calls": {
            "type": 176
          },
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": 8,
              "value": "0x6009000000000000",
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": 8,
              "value": "0x7017000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "errors": {
            "type": 181
          },
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 182
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0xb80b000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 3
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 188
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 191
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 192
          },
          "events": {
            "type": 25
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 195
          },
          "index": 4
        },
        {
          "name": "Kton",
          "storage": {
            "prefix": "Kton",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 184
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 188
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 191
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 196
          },
          "events": {
            "type": 27
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 197
          },
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 119
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": [

                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 198
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            },
            {
              "name": "WeightToFee",
              "type": 199,
              "value": "0x04000000000000000000000000000000000008af2f0001",
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "errors": null,
          "index": 6
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "plain": 201
                },
                "fallback": "0x00",
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "type": 204
          },
          "events": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "errors": {
            "type": 206
          },
          "index": 7
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "items": [
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x01000000",
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "type": {
                  "plain": 207
                },
                "fallback": "0x00",
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "type": {
                  "plain": 209
                },
                "fallback": "0x00",
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "type": {
                  "plain": 214
                },
                "fallback": "0x00",
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "type": {
                  "plain": 217
                },
                "fallback": "0x00",
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "type": {
                  "plain": 218
                },
                "fallback": "0x00",
                "docs": [
                  " A sorted, bounded set of `(score, index)`, where each `index` points to a value in",
                  " `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 222
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000",
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "type": {
                  "plain": 213
                },
                "fallback": "0x00",
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": {
            "type": 275
          },
          "events": {
            "type": 28
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "type": 4,
              "value": "0x58020000",
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "SolutionImprovementThreshold",
              "type": 148,
              "value": "0x20a10700",
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" (in any phase)."
              ]
            },
            {
              "name": "OffchainRepeat",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "type": 8,
              "value": "0x65666666666666e6",
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "MinerMaxWeight",
              "type": 8,
              "value": "0xc0d8426950010000",
              "docs": [
                " Maximum weight that the miner should consume.",
                "",
                " The miner will ensure that the total weight of the unsigned solution will not exceed",
                " this value, based on [`WeightInfo::submit_unsigned`]."
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "type": 8,
              "value": "0xc0d8426950010000",
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " This should probably be similar to [`Config::MinerMaxWeight`]."
              ]
            },
            {
              "name": "SignedRewardBase",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "type": 6,
              "value": "0x40420f00000000000000000000000000",
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "type": 6,
              "value": "0xe8030000000000000000000000000000",
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "VoterSnapshotPerBlock",
              "type": 4,
              "value": "0xe4570000",
              "docs": [
                " The maximum number of voters to put in the snapshot. At the moment, snapshots are only",
                " over a single block, but once multi-block elections are introduced they will take place",
                " over multiple blocks.",
                "",
                " Also, note the data type: If the voters are represented by a `u32` in `type",
                " CompactSolution`, the same `u32` is used here to ensure bounds are respected."
              ]
            },
            {
              "name": "MinerMaxLength",
              "type": 4,
              "value": "0x00003600",
              "docs": [
                " Maximum length (bytes) that the mined solution should consume.",
                "",
                " The miner will ensure that the total length of the unsigned solution will not exceed",
                " this value."
              ]
            }
          ],
          "errors": {
            "type": 277
          },
          "index": 38
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x50010000",
                "docs": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                  " always be in history. I.e. `active_era > current_era - history_depth` must be",
                  " guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 278
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 286
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 287
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " When updating this storage item, you must also update the `CounterForValidators`."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " A tracker to keep count of the number of items in the `Validators` map."
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 289
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                  "",
                  " When updating this storage item, you must also update the `CounterForNominators`."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " A tracker to keep count of the number of items in the `Nominators` map."
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "plain": 290
                },
                "fallback": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 46
                  }
                },
                "fallback": "0x0000000000000000000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 46
                  }
                },
                "fallback": "0x0000000000000000000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 287
                  }
                },
                "fallback": "0x0000",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 292
                  }
                },
                "fallback": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "plain": 296
                },
                "fallback": "0x00",
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "plain": 148
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 297
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "plain": 144
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 302
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 299
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 303
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 295,
                    "value": 304
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " The earliest era for which we have a pending, unapplied slash."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": "Default",
                "type": {
                  "plain": 305
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 307
                },
                "fallback": "0x06",
                "docs": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v7.0.0 for new networks."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "type": {
                  "plain": 308
                },
                "fallback": "0x00",
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              },
              {
                "name": "LivingTime",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The chain's running time form genesis in milliseconds,",
                  " use for calculate darwinia era payout"
                ]
              },
              {
                "name": "PayoutFraction",
                "modifier": "Default",
                "type": {
                  "plain": 148
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the total payout that is distributed to validators and nominators",
                  "",
                  " The reset might go to Treasury or something else."
                ]
              },
              {
                "name": "RingPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total *RING* in pool."
                ]
              },
              {
                "name": "KtonPool",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Total *KTON* in pool."
                ]
              }
            ]
          },
          "calls": {
            "type": 309
          },
          "events": {
            "type": 32
          },
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": 4,
              "value": "0x06000000",
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "type": 4,
              "value": "0x0d000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": 4,
              "value": "0x40000000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "BondingDurationInEra",
              "type": 4,
              "value": "0x0e000000",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "BondingDurationInBlockNumber",
              "type": 4,
              "value": "0x80130300",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "Cap",
              "type": 6,
              "value": "0x0000e8890423c78a0000000000000000",
              "docs": [
                " Darwinia's hard cap default `10_000_000_000 * 10^9`"
              ]
            },
            {
              "name": "TotalPower",
              "type": 4,
              "value": "0x00ca9a3b",
              "docs": [
                " Darwinia's staking vote default `1_000_000_000`"
              ]
            },
            {
              "name": "MaxNominations",
              "type": 4,
              "value": "0x10000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 313
          },
          "index": 8
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 314
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 315,
                    "value": 104
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 34,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 33
          },
          "constants": [

          ],
          "errors": null,
          "index": 9
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 10
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": 316
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": 285
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 318
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 320,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "type": 322
          },
          "events": {
            "type": 35
          },
          "constants": [

          ],
          "errors": {
            "type": 323
          },
          "index": 11
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "plain": 324
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "plain": 325
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "plain": 86
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "type": 327
          },
          "events": {
            "type": 36
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0xa0860100",
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "errors": {
            "type": 339
          },
          "index": 13
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "plain": 340
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 86,
                    "value": 342
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 291,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": {
            "type": 347
          },
          "events": {
            "type": 41
          },
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": 8,
              "value": "0xffffffffffffffff",
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "errors": {
            "type": 355
          },
          "index": 14
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 15
        },
        {
          "name": "DarwiniaHeaderMmr",
          "storage": {
            "prefix": "DarwiniaHeaderMmr",
            "items": [
              {
                "name": "MmrSize",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Size of the MMR"
                ]
              },
              {
                "name": "Peaks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Peaks of the MMR"
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 35
        },
        {
          "name": "MessageGadget",
          "storage": {
            "prefix": "MessageGadget",
            "items": [
              {
                "name": "CommitmentContract",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 356
          },
          "events": null,
          "constants": [

          ],
          "errors": null,
          "index": 50
        },
        {
          "name": "EcdsaRelayAuthority",
          "storage": {
            "prefix": "EcdsaRelayAuthority",
            "items": [
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 357
                },
                "fallback": "0x00",
                "docs": [
                  " Anyone can request to be an authority with some stake.",
                  "",
                  " Once you requested, you'll enter the candidates.",
                  " This request can be canceled at any time."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 357
                },
                "fallback": "0x00",
                "docs": [
                  " Authority must elect from candidates",
                  "",
                  " Once you become an authority, you must serve for a specific term.",
                  " Before that, you can't renounce."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Optional",
                "type": {
                  "plain": 360
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming authorities for the next term."
                ]
              },
              {
                "name": "NextTerm",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Term index counter, play the same role as nonce in extrinsic."
                ]
              },
              {
                "name": "AuthoritiesToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 361
                },
                "fallback": "0x00",
                "docs": [
                  " The authorities change requirements.",
                  "",
                  " Once the signatures count reaches the sign threshold storage will be killed then raise a",
                  " signed event Params.",
                  " \t1. the message to sign",
                  " \t1. collected signatures"
                ]
              },
              {
                "name": "MmrRootsToSignKeys",
                "modifier": "Default",
                "type": {
                  "plain": 363
                },
                "fallback": "0x00",
                "docs": [
                  " The `MmrRootsToSign` keys cache.",
                  "",
                  " Only use for update the `MmrRootsToSign` once the authorities changed."
                ]
              },
              {
                "name": "MmrRootsToSign",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 364
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the relay requirements from the backing module here.",
                  "",
                  " If the map's key has existed, it means the mmr root relay requirement is valid.",
                  "",
                  " Once the signatures count reaches the sign threshold storage will be killed then raise a",
                  " signed event Params.",
                  " \t1. the mmr root to be signed, collected signatures"
                ]
              },
              {
                "name": "SubmitDuration",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x2c010000",
                "docs": [
                  " The mmr root signature submit duration, will be delayed if on authorities change."
                ]
              }
            ]
          },
          "calls": {
            "type": 365
          },
          "events": {
            "type": 50
          },
          "constants": [
            {
              "name": "MaxMembers",
              "type": 4,
              "value": "0x07000000",
              "docs": [

              ]
            },
            {
              "name": "LockId",
              "type": 162,
              "value": "0x6574687261757468",
              "docs": [

              ]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0xc0890100",
              "docs": [

              ]
            },
            {
              "name": "OpCodes",
              "type": 366,
              "value": "0x479fbdf9b4bcf497",
              "docs": [

              ]
            },
            {
              "name": "SignThreshold",
              "type": 148,
              "value": "0x0046c323",
              "docs": [

              ]
            },
            {
              "name": "SubmitDuration",
              "type": 4,
              "value": "0x2c010000",
              "docs": [

              ]
            },
            {
              "name": "MaxSchedules",
              "type": 4,
              "value": "0x0a000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 367
          },
          "index": 36
        },
        {
          "name": "EcdsaAuthority",
          "storage": {
            "prefix": "EcdsaAuthority",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 368
                },
                "fallback": "0x00",
                "docs": [
                  " The current active authorities."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 368
                },
                "fallback": "0x00",
                "docs": [
                  " The incoming authorities."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The nonce of the current active authorities. AKA term/session/era."
                ]
              },
              {
                "name": "AuthoritiesChangeToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 370
                },
                "fallback": "0x00",
                "docs": [
                  " The authorities change waiting for signing."
                ]
              },
              {
                "name": "NewMessageRootToSign",
                "modifier": "Optional",
                "type": {
                  "plain": 372
                },
                "fallback": "0x00",
                "docs": [
                  " The new message root waiting for signing."
                ]
              },
              {
                "name": "PreviousMessageRoot",
                "modifier": "Optional",
                "type": {
                  "plain": 373
                },
                "fallback": "0x00",
                "docs": [
                  " Record the previous message root.",
                  "",
                  " Use for checking if the message root getter get the same message root as the previous one.",
                  " And if this is empty, it means the message root is require to be relayed."
                ]
              }
            ]
          },
          "calls": {
            "type": 374
          },
          "events": {
            "type": 56
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " The maximum number of authorities."
              ]
            },
            {
              "name": "ChainId",
              "type": 10,
              "value": "0x083436",
              "docs": [
                " Chain's ID, which is using for constructing the message. (follow EIP-712 SPEC)"
              ]
            },
            {
              "name": "SignThreshold",
              "type": 148,
              "value": "0x0046c323",
              "docs": [
                " The signing threshold.",
                "",
                " Once `signatures_count / authorities_count >= threshold`, we say the message is trusted."
              ]
            },
            {
              "name": "SyncInterval",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The interval of checking the message root."
              ]
            },
            {
              "name": "MaxPendingPeriod",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " How long should we wait for the message root to be signed.",
                "",
                " If the collecting new message root signatures process takes more than",
                " `MaxPendingPeriod`, we will drop the root. And update the root with a new one."
              ]
            }
          ],
          "errors": {
            "type": 375
          },
          "index": 51
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 376
                },
                "fallback": "0x00",
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 378
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 379
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 380
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 383
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Accounts for which there are locks in action which may be removed at some point in the",
                  " future. The value is the block number at which the lock expires and may be removed.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 391
                },
                "fallback": "0x00",
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 392
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 30
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 393
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 394
          },
          "events": {
            "type": 64
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x005039278c0400000000000000000000",
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "type": 30,
              "value": "0x01",
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x08070000",
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            }
          ],
          "errors": {
            "type": 395
          },
          "index": 37
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 396
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 397
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 520
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 398
          },
          "events": {
            "type": 69
          },
          "constants": [

          ],
          "errors": {
            "type": 521
          },
          "index": 16
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 396
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 397
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 520
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 399
          },
          "events": {
            "type": 70
          },
          "constants": [

          ],
          "errors": {
            "type": 522
          },
          "index": 17
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 523
                },
                "fallback": "0x00",
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "type": {
                  "plain": 523
                },
                "fallback": "0x00",
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 72
                },
                "fallback": "0x00",
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 525
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 400
          },
          "events": {
            "type": 71
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 162,
              "value": "0x706872656c656374",
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "type": 6,
              "value": "0x00e1f505000000000000000000000000",
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "type": 6,
              "value": "0x0090d848170000000000000000000000",
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "type": 6,
              "value": "0x00d43000000000000000000000000000",
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "type": 4,
              "value": "0x07000000",
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            }
          ],
          "errors": {
            "type": 526
          },
          "index": 18
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 402
          },
          "events": {
            "type": 74
          },
          "constants": [

          ],
          "errors": {
            "type": 527
          },
          "index": 19
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 528
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 529
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 403
          },
          "events": {
            "type": 75
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 142,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x005039278c0400000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x00460500",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 142,
              "value": "0x10270000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue."
              ]
            }
          ],
          "errors": {
            "type": 531
          },
          "index": 20
        },
        {
          "name": "KtonTreasury",
          "storage": {
            "prefix": "KtonTreasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 528
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 529
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 404
          },
          "events": {
            "type": 76
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 142,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x00460500",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 142,
              "value": "0x10270000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue."
              ]
            }
          ],
          "errors": {
            "type": 532
          },
          "index": 39
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "items": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 9,
                    "value": 533
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": {
            "type": 405
          },
          "events": {
            "type": 77
          },
          "constants": [
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "type": 4,
              "value": "0x40380000",
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "type": 308,
              "value": "0x14",
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "type": 6,
              "value": "0x00e87648170000000000000000000000",
              "docs": [
                " The amount held on deposit for placing a tip report."
              ]
            }
          ],
          "errors": {
            "type": 534
          },
          "index": 40
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "items": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 535
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "type": {
                  "plain": 285
                },
                "fallback": "0x00",
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": {
            "type": 406
          },
          "events": {
            "type": 78
          },
          "constants": [
            {
              "name": "BountyDepositBase",
              "type": 6,
              "value": "0x0038b06fa30400000000000000000000",
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "type": 4,
              "value": "0x00c20100",
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "type": 4,
              "value": "0x80c61300",
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "BountyCuratorDeposit",
              "type": 142,
              "value": "0x20a10700",
              "docs": [
                " Percentage of the curator fee that will be reserved upfront as deposit for bounty",
                " curator."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "type": 6,
              "value": "0x0040e59c301200000000000000000000",
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0xa0860100000000000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length."
              ]
            }
          ],
          "errors": {
            "type": 537
          },
          "index": 41
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": {
                  "plain": 0
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": 407
          },
          "events": {
            "type": 79
          },
          "constants": [

          ],
          "errors": {
            "type": 538
          },
          "index": 27
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 539
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 541
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": {
            "type": 408
          },
          "events": {
            "type": 80
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": "0x00ca9a3b000000000000000000000000",
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "type": 4,
              "value": "0x1c000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 542
          },
          "index": 21
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 410
          },
          "events": {
            "type": 81
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": "0xaa2a0000",
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": {
            "type": 543
          },
          "index": 22
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 544
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 454
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 548
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "plain": 550
                },
                "fallback": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "type": 418
          },
          "events": {
            "type": 82
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": "0x4095004a170000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x40b56400000000000000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": "0x20c7c748170000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "errors": {
            "type": 554
          },
          "index": 23
        },
        {
          "name": "Society",
          "storage": {
            "prefix": "Society",
            "items": [
              {
                "name": "Founder",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The first member."
                ]
              },
              {
                "name": "Rules",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " A hash of the rules of this society concerning membership. Can only be set once and",
                  " only by the founder."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 555
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of candidates; bidders that are attempting to become members."
                ]
              },
              {
                "name": "SuspendedCandidates",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 558
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of suspended candidates."
                ]
              },
              {
                "name": "Pot",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Amount of our account balance that is specifically for the next round's bid(s)."
                ]
              },
              {
                "name": "Head",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The most primary from the most recently approved members."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of members, ordered."
                ]
              },
              {
                "name": "SuspendedMembers",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 30
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of suspended members."
                ]
              },
              {
                "name": "Bids",
                "modifier": "Default",
                "type": {
                  "plain": 555
                },
                "fallback": "0x00",
                "docs": [
                  " The current bids, stored ordered by the value of the bid."
                ]
              },
              {
                "name": "Vouching",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 559
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Members currently vouching or banned from vouching again"
                ]
              },
              {
                "name": "Payouts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 560
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Pending payouts; ordered by block number, with the amount that should be paid out."
                ]
              },
              {
                "name": "Strikes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ongoing number of losing votes cast by the member."
                ]
              },
              {
                "name": "Votes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 562,
                    "value": 563
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Double map from Candidate -> Voter -> (Maybe) Vote."
                ]
              },
              {
                "name": "Defender",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The defending member currently being challenged."
                ]
              },
              {
                "name": "DefenderVotes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 563
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes for the defender."
                ]
              },
              {
                "name": "MaxMembers",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The max number of members for the society at one time."
                ]
              }
            ]
          },
          "calls": {
            "type": 458
          },
          "events": {
            "type": 83
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f736f636965",
              "docs": [
                " The societies's pallet id"
              ]
            },
            {
              "name": "CandidateDeposit",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": [
                " The minimum amount of a deposit required for a bid to be made."
              ]
            },
            {
              "name": "WrongSideDeduction",
              "type": 6,
              "value": "0x00943577000000000000000000000000",
              "docs": [
                " The amount of the unpaid reward that gets deducted in the case that either a skeptic",
                " doesn't vote or someone votes in the wrong way."
              ]
            },
            {
              "name": "MaxStrikes",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The number of times a member may vote the wrong way (or not at all, when they are a",
                " skeptic) before they become suspended."
              ]
            },
            {
              "name": "PeriodSpend",
              "type": 6,
              "value": "0x0088526a740000000000000000000000",
              "docs": [
                " The amount of incentive paid within each period. Doesn't include VoterTip."
              ]
            },
            {
              "name": "RotationPeriod",
              "type": 4,
              "value": "0x80bb0000",
              "docs": [
                " The number of blocks between candidate/membership rotation periods."
              ]
            },
            {
              "name": "MaxLockDuration",
              "type": 4,
              "value": "0x004eed00",
              "docs": [
                " The maximum duration of the payout lock."
              ]
            },
            {
              "name": "ChallengePeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " The number of blocks between membership challenges."
              ]
            },
            {
              "name": "MaxCandidateIntake",
              "type": 4,
              "value": "0x01000000",
              "docs": [
                " The maximum number of candidates that we accept per round."
              ]
            }
          ],
          "errors": {
            "type": 564
          },
          "index": 24
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "items": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 565
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of recoverable accounts and their recovery configuration."
                ]
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 562,
                    "value": 566
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ]
              }
            ]
          },
          "calls": {
            "type": 460
          },
          "events": {
            "type": 84
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ]
            },
            {
              "name": "FriendDepositFactor",
              "type": 6,
              "value": "0x80f0fa02000000000000000000000000",
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ]
            },
            {
              "name": "MaxFriends",
              "type": 90,
              "value": "0x0900",
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration."
              ]
            },
            {
              "name": "RecoveryDeposit",
              "type": 6,
              "value": "0x00f2052a010000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ]
            }
          ],
          "errors": {
            "type": 567
          },
          "index": 25
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 568
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 86
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 571
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with last version."
                ]
              }
            ]
          },
          "calls": {
            "type": 461
          },
          "events": {
            "type": 85
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 8,
              "value": "0x00806e8774010000",
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "errors": {
            "type": 572
          },
          "index": 26
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 573
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 577
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": {
            "type": 463
          },
          "events": {
            "type": 88
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x20303101000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0xe40c0000000000000000000000000000",
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x20303101000000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0xc8190000000000000000000000000000",
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": {
            "type": 581
          },
          "index": 28
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "items": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2128Concat"
                    ],
                    "key": 582,
                    "value": 583
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of open multisig operations."
                ]
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 584
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 465
          },
          "events": {
            "type": 91
          },
          "constants": [
            {
              "name": "DepositBase",
              "type": 6,
              "value": "0x002ffd48170000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "type": 6,
              "value": "0x00d43000000000000000000000000000",
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "type": 90,
              "value": "0x6400",
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "errors": {
            "type": 585
          },
          "index": 29
        },
        {
          "name": "EthereumRelay",
          "storage": {
            "prefix": "DarwiniaEthereumRelay",
            "items": [
              {
                "name": "ConfirmedHeaderParcels",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 469
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Confirmed ethereum header parcel"
                ]
              },
              {
                "name": "ConfirmedBlockNumbers",
                "modifier": "Default",
                "type": {
                  "plain": 95
                },
                "fallback": "0x00",
                "docs": [
                  " Confirmed Ethereum block numbers",
                  "",
                  " The order are from small to large"
                ]
              },
              {
                "name": "BestConfirmedBlockNumber",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The highest ethereum block number that record in darwinia"
                ]
              },
              {
                "name": "ConfirmedDepth",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x0a000000",
                "docs": [

                ]
              },
              {
                "name": "DagsMerkleRoots",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 477
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Dags merkle roots of ethereum epoch (each epoch is 30000)"
                ]
              },
              {
                "name": "ReceiptVerifyFee",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "PendingRelayHeaderParcels",
                "modifier": "Default",
                "type": {
                  "plain": 586
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 468
          },
          "events": {
            "type": 93
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f657468726c",
              "docs": [

              ]
            },
            {
              "name": "ConfirmPeriod",
              "type": 4,
              "value": "0xc0a80000",
              "docs": [

              ]
            },
            {
              "name": "ApproveThreshold",
              "type": 148,
              "value": "0x0046c323",
              "docs": [

              ]
            },
            {
              "name": "RejectThreshold",
              "type": 148,
              "value": "0x80969800",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 589
          },
          "index": 32
        },
        {
          "name": "EthereumBacking",
          "storage": {
            "prefix": "EthereumBacking",
            "items": [
              {
                "name": "VerifiedProof",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 111,
                    "value": 30
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "TokenRedeemAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "DepositRedeemAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "SetAuthoritiesAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "RingTokenAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "KtonTokenAddress",
                "modifier": "Default",
                "type": {
                  "plain": 58
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "RedeemStatus",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x01",
                "docs": [

                ]
              },
              {
                "name": "LockAssetEvents",
                "modifier": "Default",
                "type": {
                  "plain": 590
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 483
          },
          "events": {
            "type": 110
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f657468626b",
              "docs": [

              ]
            },
            {
              "name": "FeePalletId",
              "type": 530,
              "value": "0x64612f6574686665",
              "docs": [

              ]
            },
            {
              "name": "RingLockLimit",
              "type": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": [

              ]
            },
            {
              "name": "KtonLockLimit",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [

              ]
            },
            {
              "name": "AdvancedFee",
              "type": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [

              ]
            },
            {
              "name": "SyncReward",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 591
          },
          "index": 31
        },
        {
          "name": "EthereumRelayerGame",
          "storage": {
            "prefix": "Instance1DarwiniaRelayerGame",
            "items": [
              {
                "name": "RelayHeaderParcelToResolve",
                "modifier": "Default",
                "type": {
                  "plain": 95
                },
                "fallback": "0x00",
                "docs": [
                  " Active games' relay header parcel's ids"
                ]
              },
              {
                "name": "Affirmations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 592,
                    "value": 593
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the active games' affirmations here",
                  "",
                  " The first key is game id, the second key is round index",
                  " then you will get the affirmations under that round in that game"
                ]
              },
              {
                "name": "BestConfirmedHeaderId",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 8
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The best confirmed header id record of a game when it start"
                ]
              },
              {
                "name": "RoundCounts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The total rounds of a game",
                  "",
                  " `total rounds - 1 = last round index`"
                ]
              },
              {
                "name": "AffirmTime",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 86
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the closed games here",
                  "",
                  " Game close at this moment, closed games won't accept any affirmation"
                ]
              },
              {
                "name": "GamesToUpdate",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 95
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All the closed rounds here",
                  "",
                  " Record the closed rounds endpoint which use for settling or updating",
                  " Settle or update a game will be scheduled which will start at this moment"
                ]
              },
              {
                "name": "Stakes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " All the stakes here"
                ]
              },
              {
                "name": "GameSamplePoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 8,
                    "value": 596
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "LOCK_ID",
              "type": 162,
              "value": "0x64612f7267616d65",
              "docs": [

              ]
            },
            {
              "name": "MAX_ACTIVE_GAMES",
              "type": 2,
              "value": "0x20",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 597
          },
          "index": 33
        },
        {
          "name": "TronBacking",
          "storage": {
            "prefix": "TronBacking",
            "items": [

            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f74726f626b",
              "docs": [

              ]
            }
          ],
          "errors": null,
          "index": 34
        },
        {
          "name": "BridgeCrabDispatch",
          "storage": null,
          "calls": null,
          "events": {
            "type": 112
          },
          "constants": [

          ],
          "errors": null,
          "index": 42
        },
        {
          "name": "BridgeCrabGrandpa",
          "storage": {
            "prefix": "BridgeCrabGrandpa",
            "items": [
              {
                "name": "RequestCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current number of requests which have written to storage.",
                  "",
                  " If the `RequestCount` hits `MaxRequests`, no more calls will be allowed to the pallet until",
                  " the request capacity is increased.",
                  "",
                  " The `RequestCount` is decreased by one at the beginning of every block. This is to ensure",
                  " that the pallet can always make progress."
                ]
              },
              {
                "name": "InitialHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the header used to bootstrap the pallet."
                ]
              },
              {
                "name": "BestFinalized",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the best finalized header."
                ]
              },
              {
                "name": "ImportedHashes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A ring buffer of imported hashes. Ordered by the insertion time."
                ]
              },
              {
                "name": "ImportedHashesPointer",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current ring buffer position."
                ]
              },
              {
                "name": "ImportedHeaders",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 178
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Headers which have been imported into the pallet."
                ]
              },
              {
                "name": "CurrentAuthoritySet",
                "modifier": "Default",
                "type": {
                  "plain": 598
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " The current GRANDPA Authority set."
                ]
              },
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "IsHalted",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x00",
                "docs": [
                  " If true, all pallet transactions are failed immediately."
                ]
              }
            ]
          },
          "calls": {
            "type": 486
          },
          "events": null,
          "constants": [
            {
              "name": "MaxRequests",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The upper bound on the number of requests allowed by the pallet.",
                "",
                " A request refers to an action which writes a header to storage.",
                "",
                " Once this bound is reached the pallet will not allow any dispatchables to be called",
                " until the request count has decreased."
              ]
            },
            {
              "name": "HeadersToKeep",
              "type": 4,
              "value": "0x70170000",
              "docs": [
                " Maximal number of finalized headers to keep in the storage.",
                "",
                " The setting is there to prevent growing the on-chain state indefinitely. Note",
                " the setting does not relate to block numbers - we will simply keep as much items",
                " in the storage, so it doesn't guarantee any fixed timeframe for finality headers."
              ]
            }
          ],
          "errors": {
            "type": 599
          },
          "index": 43
        },
        {
          "name": "BridgeCrabMessages",
          "storage": {
            "prefix": "BridgeCrabMessages",
            "items": [
              {
                "name": "PalletOwner",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " Optional pallet owner.",
                  "",
                  " Pallet owner has a right to halt all pallet operations and then resume it. If it is",
                  " `None`, then there are no direct ways to halt/resume pallet operations, but other",
                  " runtime methods may still be used to do that (i.e. democracy::referendum to update halt",
                  " flag directly or call the `halt_operations`)."
                ]
              },
              {
                "name": "PalletOperatingMode",
                "modifier": "Default",
                "type": {
                  "plain": 493
                },
                "fallback": "0x00",
                "docs": [
                  " The current operating mode of the pallet.",
                  "",
                  " Depending on the mode either all, some, or no transactions will be allowed."
                ]
              },
              {
                "name": "InboundLanes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 14,
                    "value": 600
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " Map of lane id => inbound lane data."
                ]
              },
              {
                "name": "OutboundLanes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 14,
                    "value": 603
                  }
                },
                "fallback": "0x010000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of lane id => outbound lane data."
                ]
              },
              {
                "name": "OutboundMessages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 604,
                    "value": 605
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All queued outbound messages."
                ]
              }
            ]
          },
          "calls": {
            "type": 492
          },
          "events": {
            "type": 117
          },
          "constants": [
            {
              "name": "BridgedChainId",
              "type": 14,
              "value": "0x63726162",
              "docs": [
                " Gets the chain id value from the instance."
              ]
            }
          ],
          "errors": {
            "type": 606
          },
          "index": 44
        },
        {
          "name": "FeeMarket",
          "storage": {
            "prefix": "FeeMarket",
            "items": [
              {
                "name": "RelayersMap",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 607
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "Relayers",
                "modifier": "Default",
                "type": {
                  "plain": 65
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayers",
                "modifier": "Optional",
                "type": {
                  "plain": 608
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "Orders",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 113,
                    "value": 609
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "CollateralSlashProtect",
                "modifier": "Optional",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AssignedRelayersNumber",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x03000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 504
          },
          "events": {
            "type": 123
          },
          "constants": [
            {
              "name": "TreasuryPalletId",
              "type": 530,
              "value": "0x64612f7472737279",
              "docs": [
                " Some reward goes to Treasury."
              ]
            },
            {
              "name": "LockId",
              "type": 162,
              "value": "0x64612f6665656c66",
              "docs": [

              ]
            },
            {
              "name": "MinimumRelayFee",
              "type": 6,
              "value": "0x00d6117e030000000000000000000000",
              "docs": [
                " The minimum fee for relaying."
              ]
            },
            {
              "name": "CollateralPerOrder",
              "type": 6,
              "value": "0x00743ba40b0000000000000000000000",
              "docs": [
                " The collateral relayer need to lock for each order.",
                "",
                " This also represents the maximum slash value for a single delayed order.",
                " Please note that if this value is set to zero the fee market will be suspended."
              ]
            },
            {
              "name": "Slot",
              "type": 4,
              "value": "0x2c010000",
              "docs": [
                " The slot times set"
              ]
            },
            {
              "name": "GuardRelayersRewardRatio",
              "type": 142,
              "value": "0x400d0300",
              "docs": [
                " Reward parameters"
              ]
            },
            {
              "name": "MessageRelayersRewardRatio",
              "type": 142,
              "value": "0x00350c00",
              "docs": [

              ]
            },
            {
              "name": "ConfirmRelayersRewardRatio",
              "type": 142,
              "value": "0x400d0300",
              "docs": [

              ]
            },
            {
              "name": "AssignedRelayerSlashRatio",
              "type": 142,
              "value": "0x400d0300",
              "docs": [
                " The slash ratio for assigned relayers."
              ]
            }
          ],
          "errors": {
            "type": 613
          },
          "index": 45
        },
        {
          "name": "ToCrabBacking",
          "storage": {
            "prefix": "ToCrabBacking",
            "items": [
              {
                "name": "SecureLimitedPeriod",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Period between security limitation. Zero means there is no period limitation."
                ]
              },
              {
                "name": "SecureLimitedRingAmount",
                "modifier": "Default",
                "type": {
                  "plain": 614
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " `(Spent, Maximum)` amount of *RING* security limitation each [`LimitedPeriod`]."
                ]
              },
              {
                "name": "TransactionInfos",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 113,
                    "value": 73
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " `(sender, amount)` the user *sender* lock and remote issuing amount of asset"
                ]
              },
              {
                "name": "RemoteMappingTokenFactoryAccount",
                "modifier": "Default",
                "type": {
                  "plain": 0
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The remote mapping token factory account, here use to ensure the remote caller"
                ]
              }
            ]
          },
          "calls": {
            "type": 505
          },
          "events": {
            "type": 129
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x64612f746372626b",
              "docs": [
                " The pallet id of this pallet"
              ]
            },
            {
              "name": "RingMetadata",
              "type": 130,
              "value": "0x000000006d6f646c64612f6272696e6700000000000000007444617277696e6961204e6574776f726b204e617469766520546f6b656e1052494e4709",
              "docs": [
                " The local ring metadata"
              ]
            },
            {
              "name": "MaxLockRingAmountPerTx",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": [
                " The max lock amount per transaction for security."
              ]
            }
          ],
          "errors": {
            "type": 615
          },
          "index": 46
        },
        {
          "name": "EVM",
          "storage": {
            "prefix": "EVM",
            "items": [
              {
                "name": "AccountCodes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 58,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [

                ]
              },
              {
                "name": "AccountStorages",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat",
                      "Blake2128Concat"
                    ],
                    "key": 616,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 506
          },
          "events": {
            "type": 131
          },
          "constants": [

          ],
          "errors": {
            "type": 617
          },
          "index": 47
        },
        {
          "name": "Ethereum",
          "storage": {
            "prefix": "Ethereum",
            "items": [
              {
                "name": "Pending",
                "modifier": "Default",
                "type": {
                  "plain": 618
                },
                "fallback": "0x00",
                "docs": [
                  " Current building block's transactions and receipts."
                ]
              },
              {
                "name": "CurrentBlock",
                "modifier": "Optional",
                "type": {
                  "plain": 625
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum block."
                ]
              },
              {
                "name": "CurrentReceipts",
                "modifier": "Optional",
                "type": {
                  "plain": 630
                },
                "fallback": "0x00",
                "docs": [
                  " The current Ethereum receipts."
                ]
              },
              {
                "name": "CurrentTransactionStatuses",
                "modifier": "Optional",
                "type": {
                  "plain": 631
                },
                "fallback": "0x00",
                "docs": [
                  " The current transaction statuses."
                ]
              },
              {
                "name": "RemainingRingBalance",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Remaining ring balance for dvm account."
                ]
              },
              {
                "name": "RemainingKtonBalance",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2128Concat"
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Remaining kton balance for dvm account."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 98,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Mapping for block number and hashes."
                ]
              }
            ]
          },
          "calls": {
            "type": 509
          },
          "events": {
            "type": 133
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 530,
              "value": "0x6461722f64766d70",
              "docs": [

              ]
            }
          ],
          "errors": {
            "type": 632
          },
          "index": 48
        },
        {
          "name": "BaseFee",
          "storage": {
            "prefix": "BaseFee",
            "items": [
              {
                "name": "BaseFeePerGas",
                "modifier": "Default",
                "type": {
                  "plain": 98
                },
                "fallback": "0x00ca9a3b00000000000000000000000000000000000000000000000000000000",
                "docs": [

                ]
              },
              {
                "name": "IsActive",
                "modifier": "Default",
                "type": {
                  "plain": 30
                },
                "fallback": "0x01",
                "docs": [

                ]
              },
              {
                "name": "Elasticity",
                "modifier": "Default",
                "type": {
                  "plain": 142
                },
                "fallback": "0x48e80100",
                "docs": [

                ]
              }
            ]
          },
          "calls": {
            "type": 519
          },
          "events": {
            "type": 141
          },
          "constants": [

          ],
          "errors": null,
          "index": 49
        }
      ],
      "extrinsic": {
        "type": 633,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckSpecVersion",
            "type": 635,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 636,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 637,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 638,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 640,
            "additionalSigned": 68
          },
          {
            "identifier": "CheckWeight",
            "type": 641,
            "additionalSigned": 68
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 642,
            "additionalSigned": 68
          },
          {
            "identifier": "CheckEthereumRelayHeaderParcel",
            "type": 643,
            "additionalSigned": 68
          }
        ]
      },
      "type": 644
    }
  }
}
